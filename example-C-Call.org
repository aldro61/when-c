What is the difference between .C and .Call in R?

R has two ways to call compiled code: .C and .Call.
- If you already have some C code with int/double (pointer) arguments and return values,
  then .C can be used to call that code with R integer/numeric vectors.
- If you want to input/output more complicated R data structures like lists in your compiled code,
  then you should use .Call.
  
The .Call interface is a bit more difficult to use since you have to learn the internal C functions defined by R.
In contrast .C is limited to input/output of C arrays (R vectors),
but it is still quite useful for numerical algorithms.
My rule of thumb is that I use .C if I know the size of the outputs in advance,
and otherwise I use .Call.
One example for which the size of the output is not known in advance is
[[https://github.com/tdhock/SparseSignals/blob/master/src/interface.c][SparseSignals]],
in which I used .Call.

My [[https://r-forge.r-project.org/scm/viewvc.php/pkg/?root=berr][breakpointError]] package
is a simple example package that shows how to use both of these interfaces.

*** [[https://r-forge.r-project.org/scm/viewvc.php/pkg/src/breakpointError.c?view=markup&revision=2&root=berr][src/breakpointError.c]] defines two C functions

- int errorDetails(...) takes several int, int*, double* then returns an integer error code.
- double breakpointError(...) takes several int, int* 
  then returns a double which is negative for an error,
  otherwise it is the breakpointError.
  
*** [[https://r-forge.r-project.org/scm/viewvc.php/pkg/src/breakpointError.h?view=markup&revision=2&root=berr][src/breakpointError.h]] defines prototypes and error codes

You need to write #include "breakpointError.h" at the top of interface.c and breakpointError.c.

*** [[https://r-forge.r-project.org/scm/viewvc.php/pkg/src/interface.c?view=markup&revision=2&root=berr][src/interface.c]] contains the interface/bridge functions

- Inputs/outputs of errorDetails_interface are SEXP (all R data is SEXP) and this can be used with .Call.
  It calls errorDetails and checks the return value for an error code,
  calling error() if necessary.
  Note to access SEXP and R internal C functions such as allocVector you need to #include <R.h> and
  #include <Rinternals.h> at the top of the C code file.
- breakpointError_interface inputs are pointers and output is void.
  This function can be used with .C -- note how much simpler C code this is!

*** [[https://r-forge.r-project.org/scm/viewvc.php/pkg/R/breakpointError.R?view=markup&revision=2&root=berr][R/breakpointError.R]] contains the R code with .C/.Call 

- The C function errorDetails_interface can be accessed from R using .Call("errorDetails_interface")
  which returns the R list that was constructed in the C code.
  Note how simple this is, since all the work was done in the C code.
- The C function breakpointError_interface can be accessed from R using .C("breakpointError_interface")
  which returns an R list. The interesting component of the list is named "error" 
  and it is a numeric scalar. We need to check if it is negative and if so stop() with an error.

*** Exercise for the reader

Since the sizes of the outputs of errorDetails are known in advance,
it is possible to implement it using .C, so
- svn checkout svn://r-forge.r-project.org/svnroot/berr/pkg breakpointError
- in breakpointError/src/interface.c write an errorDetails_interface_C function which takes only int* and double* arguments,
  and returns void.
- in breakpointError/R/breakpointError.R write an R function errorDetails_C which uses the C function errorDetails_interface_C.
  It should return the same kind of list as returned by the R function errorDetails defined in that same file.
- in breakpointError/tests/testthat/test-details.R write a test for the errorDetails_C function,
  using known input/output values. 
  For documentation about the testthat package, read
  [[http://r-pkgs.had.co.nz/tests.html][Hadley Wickham's chapter on Testing]].
