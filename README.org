When and how to write low-level (C/C++) instead of high-level (R/Python) code?

This is an introduction to interfacing low-level code with high-level
languages. Below, I explain situations when you should and *should
not* use low-level code. After reading that, if you decide to actually
write the low-level code, you can read examples:
- [[file:example-R-python.org][SegAnnot: a simple C library with bindings in both R and Python]]
- [[file:example-C-Call.org][breakpointError: an R package that uses both .C and .Call]]

** When to write low-level code?

In general the answer is: use a low-level language when there is no
efficient high-level implementation. Some examples:
- You need complex data structures, for example that keep a bunch of stuff sorted in a certain way.
  In that case you should definitely use C++ and the [[http://en.wikipedia.org/wiki/Standard_Template_Library][STL]].
  For example the STL 
  [[http://www.cplusplus.com/reference/map/multimap/][multimap]] is a
  [[http://en.wikipedia.org/wiki/Red%E2%80%93black_tree][red-black tree]] which I used in
  [[https://r-forge.r-project.org/scm/viewvc.php/pkg/clusterpath/src/?root=clusterpath][clusterpath]].
  Another example is 
  [[https://github.com/tdhock/DiffPeaks][DiffPeaks]]
  which also uses the
  [[http://www.cplusplus.com/reference/set/set/][set]],
  [[http://www.cplusplus.com/reference/list/][list]], and
  [[http://www.cplusplus.com/reference/map/map/][map]] containers.
- You need to perform scalar operations that can't be expressed
  without performing some redundant computations 
  using vector or matrix operations.
  In that case you should use arrays in C.
  For example I scan things along the genome in
  [[https://github.com/tdhock/PeakError][PeakError]],
  [[https://github.com/tdhock/SparseSignals][SparseSignals]], and
  [[https://r-forge.r-project.org/scm/viewvc.php/pkg/src/?root=berr][breakpointError]].
- There is some high quality library code in a low-level language that 
  is already written and you just want to use it in your high-level language.
  For example regular expression support in R is lacking,
  so I wrote
  [[https://github.com/tdhock/revector][the revector package]]
  so I can parse a character vector using a matching vector of
  [[http://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions][Perl-compatible regular expressions]].

** When to NOT write low-level code?

- You can express your computation in terms of matrix-vector or vector-scalar operations
  (or other R/Python functions which are already implemented in low-level C code).
  In that case you should just write R code or python numpy code.
  For example the R code in my 
  [[https://github.com/tdhock/WeightedROC/blob/master/R/ROC.R][WeightedROC]]
  package uses the vectorized cumsum function to compute a weighted
  [[http://en.wikipedia.org/wiki/Receiver_operating_characteristic][Receiver Operating Characteristic (ROC) curve]]
  faster than the 
  [[http://cran.r-project.org/web/packages/pROC/index.html][pROC package]]
  (which actually uses C code in some cases,
  but has a lot of overhead in R code that slows it down).
- You are waiting for your high-level R/Python code to compute.
  In that case you should use a code profiler,
  which will tell you which functions in your code are taking the most time.
  Try using
  [[https://stat.ethz.ch/R-manual/R-devel/library/utils/html/Rprof.html][the Rprof function]]
  and reading 
  [[http://adv-r.had.co.nz/Profiling.html][Hadley Wickham's guide to Profiling R code]].
  For Python take a look at [[https://docs.python.org/2/library/profile.html][profile/cProfile]].
  Usually, there is one function that takes 90% of the time,
  and you can just re-write that function in terms of vector operations in high-level R/Python code.
  If your code is still slow after that,
  then you should start thinking about re-writing that one slow function in low-level code.
- Your program uses all available memory and starts swapping.
  In that case maybe you can break your problem into separate tasks that can be computed independently?
  It may be useful to know how much memory R is using, via
  =cat(’point 1 mem’, memory.size(), memory.size(max=TRUE), ’\n’)=
  (from Circle 2 Growing Objects of [[http://www.burns-stat.com/pages/Tutor/R_inferno.pdf][The R Inferno by Patrick Burns]]).
  If so, then just read the first data subset into memory,
  perform the first computation,
  write the first result to disk,
  erase the first data subset from memory,
  read the second data subset into memory,
  etc. This is also the basic idea behind
  [[http://cbio.ensmp.fr/~thocking/r-cbio-cluster.html][parallelization using qsub to launch jobs on a computer cluster]].
  

